// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  role      UserRole  @default(CLIENT) // ADMIN or CLIENT
  status    UserStatus @default(PENDING) // PENDING or VERIFIED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deliveries Delivery[]

  // Chat relations
  messagesSent     Message[] @relation("MessagesSent") // Messages sent by this user
  messagesReceived Message[] @relation("MessagesReceived") // Messages received by this user

  // Conversation relations (admin-client pairs)
  adminConversations   Conversation[] @relation("AdminConversations")
  clientConversations  Conversation[] @relation("ClientConversations")

  // Many-to-many conversation participation (for future group chat support)
  conversationParticipants ConversationParticipants[]
}

enum UserRole {
  ADMIN
  CLIENT
}

enum UserStatus {
  PENDING
  VERIFIED
}

// Join table for many-to-many Conversation <-> User (future group chat support)
model ConversationParticipants {
  id             String        @id @default(cuid())
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User          @relation(fields: [userId], references: [id])
  userId         String

  joinedAt       DateTime      @default(now())

  @@unique([conversationId, userId])
}


model Delivery {
  id                   String   @id @default(cuid())
  trackingCode         String   @unique
  clientId             String
  client               User     @relation(fields: [clientId], references: [id])
  pickupLocation       String
  deliveryLocation     String
  status              DeliveryStatus @default(PENDING)
  startTime           DateTime
  estimatedDuration   Int // in minutes
  expectedDeliveryTime DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  EXPIRED
}

model Conversation {
  id        String   @id @default(cuid())
  adminId   String
  clientId  String
  admin     User     @relation("AdminConversations", fields: [adminId], references: [id])
  client    User     @relation("ClientConversations", fields: [clientId], references: [id])
  messages  Message[]
  createdAt DateTime @default(now())

  // Many-to-many participants (for future group chat support)
  participants ConversationParticipants[]
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String
  timestamp      DateTime @default(now())
  read           Boolean  @default(false)

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User        @relation("MessagesSent", fields: [senderId], references: [id])
  receiver       User        @relation("MessagesReceived", fields: [receiverId], references: [id])

  @@index([conversationId]) // Optimize query performance
} // Each message is tied to one sender and one receiver